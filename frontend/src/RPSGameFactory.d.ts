/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RPSGameFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createGame(uint256,address)": FunctionFragment;
    "getDeployedGames()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createGame",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedGames",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedGames",
    data: BytesLike
  ): Result;

  events: {
    "RPSGameCreated(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RPSGameCreated"): EventFragment;
}

export class RPSGameFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RPSGameFactoryInterface;

  functions: {
    createGame(
      betAmount: BigNumberish,
      opponent: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createGame(uint256,address)"(
      betAmount: BigNumberish,
      opponent: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDeployedGames(overrides?: CallOverrides): Promise<{
      0: {
        gameAddress: string;
        player: string;
        opponent: string;
        betAmount: BigNumber;
        0: string;
        1: string;
        2: string;
        3: BigNumber;
      }[];
    }>;

    "getDeployedGames()"(overrides?: CallOverrides): Promise<{
      0: {
        gameAddress: string;
        player: string;
        opponent: string;
        betAmount: BigNumber;
        0: string;
        1: string;
        2: string;
        3: BigNumber;
      }[];
    }>;
  };

  createGame(
    betAmount: BigNumberish,
    opponent: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createGame(uint256,address)"(
    betAmount: BigNumberish,
    opponent: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDeployedGames(
    overrides?: CallOverrides
  ): Promise<
    {
      gameAddress: string;
      player: string;
      opponent: string;
      betAmount: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
    }[]
  >;

  "getDeployedGames()"(
    overrides?: CallOverrides
  ): Promise<
    {
      gameAddress: string;
      player: string;
      opponent: string;
      betAmount: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
    }[]
  >;

  callStatic: {
    createGame(
      betAmount: BigNumberish,
      opponent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createGame(uint256,address)"(
      betAmount: BigNumberish,
      opponent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getDeployedGames(
      overrides?: CallOverrides
    ): Promise<
      {
        gameAddress: string;
        player: string;
        opponent: string;
        betAmount: BigNumber;
        0: string;
        1: string;
        2: string;
        3: BigNumber;
      }[]
    >;

    "getDeployedGames()"(
      overrides?: CallOverrides
    ): Promise<
      {
        gameAddress: string;
        player: string;
        opponent: string;
        betAmount: BigNumber;
        0: string;
        1: string;
        2: string;
        3: BigNumber;
      }[]
    >;
  };

  filters: {
    RPSGameCreated(game: null): EventFilter;
  };

  estimateGas: {
    createGame(
      betAmount: BigNumberish,
      opponent: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createGame(uint256,address)"(
      betAmount: BigNumberish,
      opponent: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDeployedGames(overrides?: CallOverrides): Promise<BigNumber>;

    "getDeployedGames()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createGame(
      betAmount: BigNumberish,
      opponent: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createGame(uint256,address)"(
      betAmount: BigNumberish,
      opponent: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDeployedGames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDeployedGames()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
