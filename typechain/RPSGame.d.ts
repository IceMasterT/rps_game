/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RPSGameInterface extends ethers.utils.Interface {
  functions: {
    "betAmount()": FunctionFragment;
    "gameState()": FunctionFragment;
    "playerA()": FunctionFragment;
    "playerB()": FunctionFragment;
    "submitBet()": FunctionFragment;
    "submitMove(uint8)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "betAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameState", values?: undefined): string;
  encodeFunctionData(functionFragment: "playerA", values?: undefined): string;
  encodeFunctionData(functionFragment: "playerB", values?: undefined): string;
  encodeFunctionData(functionFragment: "submitBet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitMove",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "betAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitMove", data: BytesLike): Result;

  events: {
    "ResetGame()": EventFragment;
    "Winner(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ResetGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Winner"): EventFragment;
}

export class RPSGame extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RPSGameInterface;

  functions: {
    betAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "betAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    gameState(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "gameState()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    playerA(overrides?: CallOverrides): Promise<{
      move: number;
      balance: BigNumber;
      addr: string;
      submitted: boolean;
      0: number;
      1: BigNumber;
      2: string;
      3: boolean;
    }>;

    "playerA()"(overrides?: CallOverrides): Promise<{
      move: number;
      balance: BigNumber;
      addr: string;
      submitted: boolean;
      0: number;
      1: BigNumber;
      2: string;
      3: boolean;
    }>;

    playerB(overrides?: CallOverrides): Promise<{
      move: number;
      balance: BigNumber;
      addr: string;
      submitted: boolean;
      0: number;
      1: BigNumber;
      2: string;
      3: boolean;
    }>;

    "playerB()"(overrides?: CallOverrides): Promise<{
      move: number;
      balance: BigNumber;
      addr: string;
      submitted: boolean;
      0: number;
      1: BigNumber;
      2: string;
      3: boolean;
    }>;

    submitBet(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "submitBet()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    submitMove(
      _move: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitMove(uint8)"(
      _move: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  betAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "betAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  gameState(overrides?: CallOverrides): Promise<number>;

  "gameState()"(overrides?: CallOverrides): Promise<number>;

  playerA(overrides?: CallOverrides): Promise<{
    move: number;
    balance: BigNumber;
    addr: string;
    submitted: boolean;
    0: number;
    1: BigNumber;
    2: string;
    3: boolean;
  }>;

  "playerA()"(overrides?: CallOverrides): Promise<{
    move: number;
    balance: BigNumber;
    addr: string;
    submitted: boolean;
    0: number;
    1: BigNumber;
    2: string;
    3: boolean;
  }>;

  playerB(overrides?: CallOverrides): Promise<{
    move: number;
    balance: BigNumber;
    addr: string;
    submitted: boolean;
    0: number;
    1: BigNumber;
    2: string;
    3: boolean;
  }>;

  "playerB()"(overrides?: CallOverrides): Promise<{
    move: number;
    balance: BigNumber;
    addr: string;
    submitted: boolean;
    0: number;
    1: BigNumber;
    2: string;
    3: boolean;
  }>;

  submitBet(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "submitBet()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  submitMove(
    _move: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitMove(uint8)"(
    _move: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    betAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "betAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    gameState(overrides?: CallOverrides): Promise<number>;

    "gameState()"(overrides?: CallOverrides): Promise<number>;

    playerA(overrides?: CallOverrides): Promise<{
      move: number;
      balance: BigNumber;
      addr: string;
      submitted: boolean;
      0: number;
      1: BigNumber;
      2: string;
      3: boolean;
    }>;

    "playerA()"(overrides?: CallOverrides): Promise<{
      move: number;
      balance: BigNumber;
      addr: string;
      submitted: boolean;
      0: number;
      1: BigNumber;
      2: string;
      3: boolean;
    }>;

    playerB(overrides?: CallOverrides): Promise<{
      move: number;
      balance: BigNumber;
      addr: string;
      submitted: boolean;
      0: number;
      1: BigNumber;
      2: string;
      3: boolean;
    }>;

    "playerB()"(overrides?: CallOverrides): Promise<{
      move: number;
      balance: BigNumber;
      addr: string;
      submitted: boolean;
      0: number;
      1: BigNumber;
      2: string;
      3: boolean;
    }>;

    submitBet(overrides?: CallOverrides): Promise<void>;

    "submitBet()"(overrides?: CallOverrides): Promise<void>;

    submitMove(_move: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "submitMove(uint8)"(
      _move: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ResetGame(): EventFilter;

    Winner(_winner: string | null): EventFilter;
  };

  estimateGas: {
    betAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "betAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    gameState(overrides?: CallOverrides): Promise<BigNumber>;

    "gameState()"(overrides?: CallOverrides): Promise<BigNumber>;

    playerA(overrides?: CallOverrides): Promise<BigNumber>;

    "playerA()"(overrides?: CallOverrides): Promise<BigNumber>;

    playerB(overrides?: CallOverrides): Promise<BigNumber>;

    "playerB()"(overrides?: CallOverrides): Promise<BigNumber>;

    submitBet(overrides?: PayableOverrides): Promise<BigNumber>;

    "submitBet()"(overrides?: PayableOverrides): Promise<BigNumber>;

    submitMove(_move: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "submitMove(uint8)"(
      _move: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    betAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "betAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gameState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "playerA()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "playerB()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitBet(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "submitBet()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    submitMove(
      _move: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitMove(uint8)"(
      _move: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
