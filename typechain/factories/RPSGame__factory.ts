/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Contract,
  ContractFactory,
  PayableOverrides,
} from "@ethersproject/contracts";

import type { RPSGame } from "../RPSGame";

export class RPSGame__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _betAmount: BigNumberish,
    _opponent: string,
    overrides?: PayableOverrides
  ): Promise<RPSGame> {
    return super.deploy(
      _betAmount,
      _opponent,
      overrides || {}
    ) as Promise<RPSGame>;
  }
  getDeployTransaction(
    _betAmount: BigNumberish,
    _opponent: string,
    overrides?: PayableOverrides
  ): TransactionRequest {
    return super.getDeployTransaction(_betAmount, _opponent, overrides || {});
  }
  attach(address: string): RPSGame {
    return super.attach(address) as RPSGame;
  }
  connect(signer: Signer): RPSGame__factory {
    return super.connect(signer) as RPSGame__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RPSGame {
    return new Contract(address, _abi, signerOrProvider) as RPSGame;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_betAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_opponent",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Draw",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "GameComplete",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "betAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "Incentivized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ResetGame",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_winner",
        type: "address",
      },
    ],
    name: "Winner",
    type: "event",
  },
  {
    inputs: [],
    name: "betAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "depositBet",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameState",
    outputs: [
      {
        internalType: "enum RPSGame.GameState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playerA",
    outputs: [
      {
        internalType: "enum RPSGame.Move",
        name: "move",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "hashedMove",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "submitted",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "revealed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playerB",
    outputs: [
      {
        internalType: "enum RPSGame.Move",
        name: "move",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "hashedMove",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "submitted",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "revealed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_move",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_salt",
        type: "bytes32",
      },
    ],
    name: "revealMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hashedMove",
        type: "bytes32",
      },
    ],
    name: "submitMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "";
