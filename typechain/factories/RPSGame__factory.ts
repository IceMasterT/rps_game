/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Contract,
  ContractFactory,
  PayableOverrides,
} from "@ethersproject/contracts";

import type { RPSGame } from "../RPSGame";

export class RPSGame__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _betAmount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<RPSGame> {
    return super.deploy(_betAmount, overrides || {}) as Promise<RPSGame>;
  }
  getDeployTransaction(
    _betAmount: BigNumberish,
    overrides?: PayableOverrides
  ): TransactionRequest {
    return super.getDeployTransaction(_betAmount, overrides || {});
  }
  attach(address: string): RPSGame {
    return super.attach(address) as RPSGame;
  }
  connect(signer: Signer): RPSGame__factory {
    return super.connect(signer) as RPSGame__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RPSGame {
    return new Contract(address, _abi, signerOrProvider) as RPSGame;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_betAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ResetGame",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_winner",
        type: "address",
      },
    ],
    name: "Winner",
    type: "event",
  },
  {
    inputs: [],
    name: "betAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "depositBet",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameState",
    outputs: [
      {
        internalType: "enum RPSGame.GameState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pickWinner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "playerA",
    outputs: [
      {
        internalType: "enum RPSGame.Move",
        name: "move",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "submitted",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playerB",
    outputs: [
      {
        internalType: "enum RPSGame.Move",
        name: "move",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "submitted",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum RPSGame.Move",
        name: "_move",
        type: "uint8",
      },
    ],
    name: "submitMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052604051610c20380380610c208339810160408190526100229161003c565b600655600280546001600160a01b03191633179055610054565b60006020828403121561004d578081fd5b5051919050565b610bbd806100636000396000f3fe60806040526004361061006b5760003560e01c806311bb1537146100705780633fe347271461009e5780635d495aea146100a8578063a285c54a146100bd578063d1f9c24d146100d2578063d24257c0146100f4578063e07fa3c114610116578063e1ff3b331461012b575b600080fd5b34801561007c57600080fd5b5061008561014b565b60405161009594939291906108b7565b60405180910390f35b6100a6610170565b005b3480156100b457600080fd5b506100a661028f565b3480156100c957600080fd5b5061008561037c565b3480156100de57600080fd5b506100e76103a1565b60405161009591906108a4565b34801561010057600080fd5b506101096103aa565b6040516100959190610b1b565b34801561012257600080fd5b506100a66103b0565b34801561013757600080fd5b506100a661014636600461087e565b6104b9565b60035460045460055460ff928316926001600160a01b03821691600160a01b90041684565b600260075460ff16600381111561019757634e487b7160e01b600052602160045260246000fd5b14156101be5760405162461bcd60e51b81526004016101b5906109cf565b60405180910390fd5b6002546001600160a01b03163314806101e457600580546001600160a01b031916331790555b806102095734600360010160008282546101fe9190610b24565b925050819055610225565b346000600101600082825461021e9190610b24565b9250508190555b5060008161023557600454610239565b6001545b905060065481101561025d5760405162461bcd60e51b81526004016101b590610984565b8115610275576007805460ff1916600117905561028b565b600780546002919060ff19166001835b02179055505b5050565b6002546001600160a01b03163314806102b257506005546001600160a01b031633145b6102ce5760405162461bcd60e51b81526004016101b590610a98565b600254600160a01b900460ff1680156102f05750600554600160a01b900460ff165b61030c5760405162461bcd60e51b81526004016101b590610acd565b6007805460ff191660031790556000610323610608565b90506001600160a01b03811615610371576040516001600160a01b038216907f745c90b656b4aafe296c8ca35aeacfe56cb96c90e1d320e5da643fff1051b6c090600090a26103718161079f565b610379610826565b50565b60005460015460025460ff928316926001600160a01b03821691600160a01b90041684565b60075460ff1681565b60065481565b6002546001600160a01b03163314806103d357506005546001600160a01b031633145b6103ef5760405162461bcd60e51b81526004016101b590610a98565b6002546000906001600160a01b0316331461040b57600361040e565b60005b905060008160010154116104345760405162461bcd60e51b81526004016101b590610937565b600260075460ff16600381111561045b57634e487b7160e01b600052602160045260246000fd5b14156104795760405162461bcd60e51b81526004016101b590610a06565b600281015460018201546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561028b573d6000803e3d6000fd5b6002546001600160a01b03163314806104dc57506005546001600160a01b031633145b6104f85760405162461bcd60e51b81526004016101b590610a98565b600260075460ff16600381111561051f57634e487b7160e01b600052602160045260246000fd5b1461053c5760405162461bcd60e51b81526004016101b590610a63565b6002546000906001600160a01b0316331461055857600361055b565b60005b6002810154909150600160a01b900460ff161561058a5760405162461bcd60e51b81526004016101b5906108eb565b80548290829060ff191660018360038111156105b657634e487b7160e01b600052602160045260246000fd5b02179055506002808201805460ff60a01b1916600160a01b90811790915590540460ff1680156105ef5750600554600160a01b900460ff165b1561028b57600780546003919060ff1916600183610285565b6003805460009160ff9091169081111561063257634e487b7160e01b600052602160045260246000fd5b60005460ff16600381111561065757634e487b7160e01b600052602160045260246000fd5b14156106655750600061079c565b600160005460ff16600381111561068c57634e487b7160e01b600052602160045260246000fd5b1480156106bb57506003805460ff16818111156106b957634e487b7160e01b600052602160045260246000fd5b145b806107195750600260005460ff1660038111156106e857634e487b7160e01b600052602160045260246000fd5b148015610719575060016003805460ff169081111561071757634e487b7160e01b600052602160045260246000fd5b145b806107775750600360005460ff16600381111561074657634e487b7160e01b600052602160045260246000fd5b148015610777575060026003805460ff169081111561077557634e487b7160e01b600052602160045260246000fd5b145b1561078e57506002546001600160a01b031661079c565b506005546001600160a01b03165b90565b6002546001600160a01b03828116911614156107ef57600654600180546000906107ca908490610b24565b9091555050600654600480546000906107e4908490610b3c565b909155506103799050565b60065460048054600090610804908490610b24565b90915550506006546001805460009061081e908490610b3c565b909155505050565b6000805460ff1990811682556002805460ff60a01b19908116909155600380549092169091556005805490911690556040517fc41db7bf93b2ffacecac5d21bb880bf7435f8e756b583a2434d667ebd52516d69190a1565b60006020828403121561088f578081fd5b81356004811061089d578182fd5b9392505050565b602081016108b183610b69565b91905290565b608081016108c486610b69565b94815260208101939093526001600160a01b03919091166040830152151560609091015290565b6020808252602c908201527f52505347616d653a20796f75206861766520616c7265616479207375626d697460408201526b74656420746865206d6f766560a01b606082015260800190565b6020808252602d908201527f52505347616d653a20596f7520646f6e2774206861766520616e797468696e6760408201526c20746f2077697468647261772160981b606082015260800190565b6020808252602b908201527f52505347616d653a2042616c616e6365206e6f7420656e6f7567682c2053656e60408201526a19081b5bdc9948199d5b9960aa1b606082015260800190565b6020808252601c908201527f52505347616d653a2047616d6520756e6465722070726f677265737300000000604082015260600190565b6020808252603e908201527f52505347616d653a20596f752063616e6e6f742077697468647261772066756e60408201527f64207768696c652067616d6520697320756e6465722070726f67726573730000606082015260800190565b6020808252818101527f52505347616d653a2067616d65206e6f7420756e6465722070726f6772657373604082015260600190565b6020808252601b908201527a292829a3b0b6b29d102737ba1030903b30b634b210383630bcb2b960291b604082015260600190565b6020808252602e908201527f52505347616d653a20506c61796572732068617665206e6f74207375626d697460408201526d746564207468656972206d6f766560901b606082015260800190565b90815260200190565b60008219821115610b3757610b37610b53565b500190565b600082821015610b4e57610b4e610b53565b500390565b634e487b7160e01b600052601160045260246000fd5b6004811061037957634e487b7160e01b600052602160045260246000fdfea2646970667358221220ce8b9b6b26fde80330655651888ab2c721e18a35238f7ea2197601feef28a23e64736f6c63430008000033";
