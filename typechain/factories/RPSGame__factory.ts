/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Contract,
  ContractFactory,
  PayableOverrides,
} from "@ethersproject/contracts";

import type { RPSGame } from "../RPSGame";

export class RPSGame__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _betAmount: BigNumberish,
    _player: string,
    _opponent: string,
    overrides?: PayableOverrides
  ): Promise<RPSGame> {
    return super.deploy(
      _betAmount,
      _player,
      _opponent,
      overrides || {}
    ) as Promise<RPSGame>;
  }
  getDeployTransaction(
    _betAmount: BigNumberish,
    _player: string,
    _opponent: string,
    overrides?: PayableOverrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _betAmount,
      _player,
      _opponent,
      overrides || {}
    );
  }
  attach(address: string): RPSGame {
    return super.attach(address) as RPSGame;
  }
  connect(signer: Signer): RPSGame__factory {
    return super.connect(signer) as RPSGame__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RPSGame {
    return new Contract(address, _abi, signerOrProvider) as RPSGame;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_betAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_player",
        type: "address",
      },
      {
        internalType: "address",
        name: "_opponent",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "depositor",
        type: "address",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "GameComplete",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum RPSGame.GameStage",
        name: "gameStage",
        type: "uint8",
      },
    ],
    name: "GameStageChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ResetGame",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RevealMove",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "SubmitMove",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_winner",
        type: "address",
      },
    ],
    name: "Winner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "betAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "depositBet",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameStage",
    outputs: [
      {
        internalType: "enum RPSGame.GameStage",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_player",
        type: "address",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        components: [
          {
            internalType: "enum RPSGame.Move",
            name: "move",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "hashedMove",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "bool",
            name: "submitted",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "revealed",
            type: "bool",
          },
        ],
        internalType: "struct RPSGame.Player",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playerA",
    outputs: [
      {
        internalType: "enum RPSGame.Move",
        name: "move",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "hashedMove",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "submitted",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "revealed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playerB",
    outputs: [
      {
        internalType: "enum RPSGame.Move",
        name: "move",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "hashedMove",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "submitted",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "revealed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "resetGame",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_move",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_salt",
        type: "bytes32",
      },
    ],
    name: "revealMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hashedMove",
        type: "bytes32",
      },
    ],
    name: "submitMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "winner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "";
