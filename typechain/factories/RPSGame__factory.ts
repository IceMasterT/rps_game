/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Contract,
  ContractFactory,
  PayableOverrides,
} from "@ethersproject/contracts";

import type { RPSGame } from "../RPSGame";

export class RPSGame__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _betAmount: BigNumberish,
    _opponent: string,
    overrides?: PayableOverrides
  ): Promise<RPSGame> {
    return super.deploy(
      _betAmount,
      _opponent,
      overrides || {}
    ) as Promise<RPSGame>;
  }
  getDeployTransaction(
    _betAmount: BigNumberish,
    _opponent: string,
    overrides?: PayableOverrides
  ): TransactionRequest {
    return super.getDeployTransaction(_betAmount, _opponent, overrides || {});
  }
  attach(address: string): RPSGame {
    return super.attach(address) as RPSGame;
  }
  connect(signer: Signer): RPSGame__factory {
    return super.connect(signer) as RPSGame__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RPSGame {
    return new Contract(address, _abi, signerOrProvider) as RPSGame;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_betAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_opponent",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "depositor",
        type: "address",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "GameComplete",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum RPSGame.GameStage",
        name: "gameStage",
        type: "uint8",
      },
    ],
    name: "GameStageChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Incentivize",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ResetGame",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RevealMove",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "SubmitMove",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_winner",
        type: "address",
      },
    ],
    name: "Winner",
    type: "event",
  },
  {
    inputs: [],
    name: "betAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "depositBet",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameStage",
    outputs: [
      {
        internalType: "enum RPSGame.GameStage",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_player",
        type: "address",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        components: [
          {
            internalType: "enum RPSGame.Move",
            name: "move",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "hashedMove",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "bool",
            name: "submitted",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "revealed",
            type: "bool",
          },
        ],
        internalType: "struct RPSGame.Player",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playerA",
    outputs: [
      {
        internalType: "enum RPSGame.Move",
        name: "move",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "hashedMove",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "submitted",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "revealed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playerB",
    outputs: [
      {
        internalType: "enum RPSGame.Move",
        name: "move",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "hashedMove",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "submitted",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "revealed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_move",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_salt",
        type: "bytes32",
      },
    ],
    name: "revealMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hashedMove",
        type: "bytes32",
      },
    ],
    name: "submitMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526040516113283803806113288339810160408190526100229161008c565b336001600160a01b03821614156100545760405162461bcd60e51b815260040161004b906100c7565b60405180910390fd5b60089190915560038054336001600160a01b031991821617909155600780549091166001600160a01b039092169190911790556100fc565b6000806040838503121561009e578182fd5b825160208401519092506001600160a01b03811681146100bc578182fd5b809150509250929050565b6020808252818101527f596f752063616e6e6f7420706c617920616761696e737420796f757273656c66604082015260600190565b61121d8061010b6000396000f3fe6080604052600436106100765760003560e01c806311bb15371461007b5780632932a4c8146100ab5780633fe34727146100cd57806350c5685b146100d55780635c12cd4b146100f7578063a285c54a14610124578063a8f7d44214610139578063d24257c014610159578063e07fa3c11461017b575b600080fd5b34801561008757600080fd5b50610090610190565b6040516100a296959493929190610df0565b60405180910390f35b3480156100b757600080fd5b506100cb6100c6366004610d5d565b6101c3565b005b6100cb610350565b3480156100e157600080fd5b506100ea61047f565b6040516100a29190610dd6565b34801561010357600080fd5b50610117610112366004610d2f565b610488565b6040516100a2919061110c565b34801561013057600080fd5b50610090610585565b34801561014557600080fd5b506100cb610154366004610d75565b6105b8565b34801561016557600080fd5b5061016e6107ae565b6040516100a29190611163565b34801561018757600080fd5b506100cb6107b4565b60045460055460065460075460ff938416936001600160a01b03821691600160a01b8104821691600160a81b9091041686565b6003546001600160a01b03163314806101e657506007546001600160a01b031633145b61020b5760405162461bcd60e51b815260040161020290611089565b60405180910390fd5b600160095460ff16600481111561023257634e487b7160e01b600052602160045260246000fd5b1461024f5760405162461bcd60e51b815260040161020290611054565b6003546000906001600160a01b0316331461026b57600461026e565b60005b6003810154909150600160a01b900460ff161561029d5760405162461bcd60e51b815260040161020290610ef6565b6001810182905560038101805460ff60a01b1916600160a01b17908190556040516001600160a01b03909116907fac7c6016acea60f1964e343e2b22ae9e5b68968d1584a0c06171cb473af6607890600090a2600354600160a01b900460ff1680156103125750600754600160a01b900460ff165b1561034c576009805460ff191660029081179091556040516000805160206111c88339815191529161034391610dd6565b60405180910390a15b5050565b6003546001600160a01b031633148061037357506007546001600160a01b031633145b61038f5760405162461bcd60e51b815260040161020290611089565b6008543410156103b15760405162461bcd60e51b815260040161020290610fd2565b6003546001600160a01b031633146103e35734600460020160008282546103d8919061116c565b9250508190556103ff565b34600060020160008282546103f8919061116c565b9250508190555b5060405133907f8ce0bd46ec50cf39f0d0ea8686a686eb226af5796dcda4231b26fb84b5ef123490600090a260085460025410801590610443575060085460065410155b1561047d576009805460ff191660019081179091556040516000805160206111c88339815191529161047491610dd6565b60405180910390a15b565b60095460ff1681565b610490610cf8565b6003546001600160a01b038381169116141561054d576040805160c0810190915260008054829060ff1660038111156104d957634e487b7160e01b600052602160045260246000fd5b60038111156104f857634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460408201526003909101546001600160a01b038116606083015260ff600160a01b8204811615156080840152600160a81b90910416151560a0909101529050610580565b6040805160c0810190915260048054829060ff1660038111156104d957634e487b7160e01b600052602160045260246000fd5b919050565b60005460015460025460035460ff938416936001600160a01b03821691600160a01b8104821691600160a81b9091041686565b6003546001600160a01b03163314806105db57506007546001600160a01b031633145b6105f75760405162461bcd60e51b815260040161020290611089565b600260095460ff16600481111561061e57634e487b7160e01b600052602160045260246000fd5b1461063b5760405162461bcd60e51b815260040161020290610ea4565b6003546000906001600160a01b0316331461065757600461065a565b60005b905060008383604051602001610671929190610db9565b6040516020818303038152906040528051906020012090508160030160159054906101000a900460ff16156106b85760405162461bcd60e51b815260040161020290610f8f565b816001015481146106db5760405162461bcd60e51b815260040161020290610e33565b8360ff1660038111156106fe57634e487b7160e01b600052602160045260246000fd5b8254839060ff1916600183600381111561072857634e487b7160e01b600052602160045260246000fd5b021790555060038201805460ff60a81b1916600160a81b17908190556040516001600160a01b03909116907f5b28e501a1ff0e8e303a6fb5b8fef018dab5fb5fbd44212d19b777f0a0335d2090600090a2600354600160a81b900460ff16801561079b5750600754600160a81b900460ff165b156107a8576107a86108ee565b50505050565b60085481565b6003546001600160a01b03163314806107d757506007546001600160a01b031633145b6107f35760405162461bcd60e51b815260040161020290611089565b600260095460ff16600481111561081a57634e487b7160e01b600052602160045260246000fd5b1415801561084d5750600160095460ff16600481111561084a57634e487b7160e01b600052602160045260246000fd5b14155b6108695760405162461bcd60e51b81526004016102029061101d565b6003546000906001600160a01b03163314610885576004610888565b60005b905060008160020154116108ae5760405162461bcd60e51b815260040161020290610f42565b600381015460028201546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561034c573d6000803e3d6000fd5b600354600160a01b900460ff1680156109105750600754600160a01b900460ff165b61092c5760405162461bcd60e51b8152600401610202906110be565b600061093661098f565b90506001600160a01b03811615610984576040516001600160a01b038216907f745c90b656b4aafe296c8ca35aeacfe56cb96c90e1d320e5da643fff1051b6c090600090a261098481610b26565b61098c610c3c565b50565b60045460009060ff1660038111156109b757634e487b7160e01b600052602160045260246000fd5b60005460ff1660038111156109dc57634e487b7160e01b600052602160045260246000fd5b14156109ea57506000610b23565b600160005460ff166003811115610a1157634e487b7160e01b600052602160045260246000fd5b148015610a425750600360045460ff166003811115610a4057634e487b7160e01b600052602160045260246000fd5b145b80610aa05750600260005460ff166003811115610a6f57634e487b7160e01b600052602160045260246000fd5b148015610aa05750600160045460ff166003811115610a9e57634e487b7160e01b600052602160045260246000fd5b145b80610afe5750600360005460ff166003811115610acd57634e487b7160e01b600052602160045260246000fd5b148015610afe5750600260045460ff166003811115610afc57634e487b7160e01b600052602160045260246000fd5b145b15610b1557506003546001600160a01b0316610b23565b506007546001600160a01b03165b90565b6003546001600160a01b0382811691161415610bbd5760085460028054600090610b5190849061116c565b909155505060085460068054600090610b6b908490611184565b90915550506003546008546040516001600160a01b03909216917f553efa0cce9c2e6959162d256a4a3a43ce9a0895fba6a045a90ec92282a41e1d91610bb091611163565b60405180910390a261098c565b60085460068054600090610bd290849061116c565b909155505060085460028054600090610bec908490611184565b90915550506007546008546040516001600160a01b03909216917f553efa0cce9c2e6959162d256a4a3a43ce9a0895fba6a045a90ec92282a41e1d91610c3191611163565b60405180910390a250565b6000805460ff199081169091556003805461ffff60a01b199081169091556004805490921690915560078054909116905560085460025410801590610c85575060085460065410155b15610c9c576009805460ff19166001179055610ca7565b6009805460ff191690555b6000805160206111c88339815191526000604051610cc59190610dd6565b60405180910390a16040517fc41db7bf93b2ffacecac5d21bb880bf7435f8e756b583a2434d667ebd52516d690600090a1565b6040805160c08101909152806000815260006020820181905260408201819052606082018190526080820181905260a09091015290565b600060208284031215610d40578081fd5b81356001600160a01b0381168114610d56578182fd5b9392505050565b600060208284031215610d6e578081fd5b5035919050565b60008060408385031215610d87578081fd5b823560ff81168114610d97578182fd5b946020939093013593505050565b60048110610db557610db56111b1565b9052565b60f89290921b6001600160f81b0319168252600182015260210190565b6020810160058310610dea57610dea6111b1565b91905290565b60c08101610dfe8289610da5565b602082019690965260408101949094526001600160a01b0392909216606084015215156080830152151560a090910152919050565b6020808252604b908201527f52505347616d653a2045697468657220796f75722073616c74206f72206d6f7660408201527f65206973206e6f742073616d6520617320796f7572207375626d69747465642060608201526a686173686564206d6f766560a81b608082015260a00190565b60208082526032908201527f52505347616d653a20626f746820706c61796572732068617665206e6f7420736040820152713ab136b4ba3a32b21036b7bb32903cb2ba1760711b606082015260800190565b6020808252602c908201527f52505347616d653a20796f75206861766520616c7265616479207375626d697460408201526b74656420746865206d6f766560a01b606082015260800190565b6020808252602d908201527f52505347616d653a20596f7520646f6e2774206861766520616e797468696e6760408201526c20746f2077697468647261772160981b606082015260800190565b60208082526023908201527f596f75206861766520616c72656164792072657665616c656420796f7572206d6040820152626f766560e81b606082015260800190565b6020808252602b908201527f52505347616d653a2042616c616e6365206e6f7420656e6f7567682c2053656e60408201526a19081b5bdc9948199d5b9960aa1b606082015260800190565b6020808252601c908201527f52505347616d653a2047616d6520756e6465722070726f677265737300000000604082015260600190565b6020808252818101527f52505347616d653a2067616d65206e6f7420756e6465722070726f6772657373604082015260600190565b6020808252601b908201527a292829a3b0b6b29d102737ba1030903b30b634b210383630bcb2b960291b604082015260600190565b6020808252602e908201527f52505347616d653a20506c61796572732068617665206e6f74207375626d697460408201526d746564207468656972206d6f766560901b606082015260800190565b600060c08201905061111f828451610da5565b602083015160208301526040830151604083015260018060a01b03606084015116606083015260808301511515608083015260a0830151151560a083015292915050565b90815260200190565b6000821982111561117f5761117f61119b565b500190565b6000828210156111965761119661119b565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfe822057341a67f757f228faa0e81e193456f287ce1fab94eea8422865716796baa264697066735822122063b159d834738fe76e43208de72d3be8282c1938fcb4f5ba615fb2e88e2a36f364736f6c63430008000033";
