/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IRPSGameV2Interface extends ethers.utils.Interface {
  functions: {
    "announceWinner()": FunctionFragment;
    "challenge()": FunctionFragment;
    "depositBet()": FunctionFragment;
    "getWinner()": FunctionFragment;
    "icentivize()": FunctionFragment;
    "resetGame()": FunctionFragment;
    "revealMove(uint8,string)": FunctionFragment;
    "submitMove(bytes32)": FunctionFragment;
    "withdrawFund()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "announceWinner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "challenge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositBet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "icentivize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resetGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revealMove",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMove",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFund",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "announceWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "icentivize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revealMove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitMove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFund",
    data: BytesLike
  ): Result;

  events: {
    "AcceptChallenge(address)": EventFragment;
    "Challenge(address,address)": EventFragment;
    "DepositSuccess(address,uint256)": EventFragment;
    "Draw()": EventFragment;
    "GameEnded(address)": EventFragment;
    "GameStarted(address,address)": EventFragment;
    "Replay(address,address)": EventFragment;
    "ResetGame()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptChallenge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Challenge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Draw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Replay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetGame"): EventFragment;
}

export class IRPSGameV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IRPSGameV2Interface;

  functions: {
    announceWinner(overrides?: Overrides): Promise<ContractTransaction>;

    "announceWinner()"(overrides?: Overrides): Promise<ContractTransaction>;

    challenge(overrides?: Overrides): Promise<ContractTransaction>;

    "challenge()"(overrides?: Overrides): Promise<ContractTransaction>;

    depositBet(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "depositBet()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    getWinner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getWinner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    icentivize(overrides?: Overrides): Promise<ContractTransaction>;

    "icentivize()"(overrides?: Overrides): Promise<ContractTransaction>;

    resetGame(overrides?: Overrides): Promise<ContractTransaction>;

    "resetGame()"(overrides?: Overrides): Promise<ContractTransaction>;

    revealMove(
      _move: BigNumberish,
      salt: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revealMove(uint8,string)"(
      _move: BigNumberish,
      salt: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitMove(
      _moveHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitMove(bytes32)"(
      _moveHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawFund(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawFund()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  announceWinner(overrides?: Overrides): Promise<ContractTransaction>;

  "announceWinner()"(overrides?: Overrides): Promise<ContractTransaction>;

  challenge(overrides?: Overrides): Promise<ContractTransaction>;

  "challenge()"(overrides?: Overrides): Promise<ContractTransaction>;

  depositBet(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "depositBet()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  getWinner(overrides?: CallOverrides): Promise<string>;

  "getWinner()"(overrides?: CallOverrides): Promise<string>;

  icentivize(overrides?: Overrides): Promise<ContractTransaction>;

  "icentivize()"(overrides?: Overrides): Promise<ContractTransaction>;

  resetGame(overrides?: Overrides): Promise<ContractTransaction>;

  "resetGame()"(overrides?: Overrides): Promise<ContractTransaction>;

  revealMove(
    _move: BigNumberish,
    salt: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revealMove(uint8,string)"(
    _move: BigNumberish,
    salt: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitMove(
    _moveHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitMove(bytes32)"(
    _moveHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawFund(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawFund()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    announceWinner(overrides?: CallOverrides): Promise<void>;

    "announceWinner()"(overrides?: CallOverrides): Promise<void>;

    challenge(overrides?: CallOverrides): Promise<void>;

    "challenge()"(overrides?: CallOverrides): Promise<void>;

    depositBet(overrides?: CallOverrides): Promise<void>;

    "depositBet()"(overrides?: CallOverrides): Promise<void>;

    getWinner(overrides?: CallOverrides): Promise<string>;

    "getWinner()"(overrides?: CallOverrides): Promise<string>;

    icentivize(overrides?: CallOverrides): Promise<void>;

    "icentivize()"(overrides?: CallOverrides): Promise<void>;

    resetGame(overrides?: CallOverrides): Promise<void>;

    "resetGame()"(overrides?: CallOverrides): Promise<void>;

    revealMove(
      _move: BigNumberish,
      salt: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revealMove(uint8,string)"(
      _move: BigNumberish,
      salt: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitMove(_moveHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    "submitMove(bytes32)"(
      _moveHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFund(overrides?: CallOverrides): Promise<void>;

    "withdrawFund()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AcceptChallenge(_challenger: string | null): EventFilter;

    Challenge(_from: string | null, _to: string | null): EventFilter;

    DepositSuccess(_from: string | null, value: null): EventFilter;

    Draw(): EventFilter;

    GameEnded(_winner: string | null): EventFilter;

    GameStarted(player1: string | null, player2: string | null): EventFilter;

    Replay(challanger: string | null, _player: string | null): EventFilter;

    ResetGame(): EventFilter;
  };

  estimateGas: {
    announceWinner(overrides?: Overrides): Promise<BigNumber>;

    "announceWinner()"(overrides?: Overrides): Promise<BigNumber>;

    challenge(overrides?: Overrides): Promise<BigNumber>;

    "challenge()"(overrides?: Overrides): Promise<BigNumber>;

    depositBet(overrides?: PayableOverrides): Promise<BigNumber>;

    "depositBet()"(overrides?: PayableOverrides): Promise<BigNumber>;

    getWinner(overrides?: CallOverrides): Promise<BigNumber>;

    "getWinner()"(overrides?: CallOverrides): Promise<BigNumber>;

    icentivize(overrides?: Overrides): Promise<BigNumber>;

    "icentivize()"(overrides?: Overrides): Promise<BigNumber>;

    resetGame(overrides?: Overrides): Promise<BigNumber>;

    "resetGame()"(overrides?: Overrides): Promise<BigNumber>;

    revealMove(
      _move: BigNumberish,
      salt: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revealMove(uint8,string)"(
      _move: BigNumberish,
      salt: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitMove(_moveHash: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "submitMove(bytes32)"(
      _moveHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawFund(overrides?: Overrides): Promise<BigNumber>;

    "withdrawFund()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    announceWinner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "announceWinner()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    challenge(overrides?: Overrides): Promise<PopulatedTransaction>;

    "challenge()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    depositBet(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "depositBet()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    getWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getWinner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    icentivize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "icentivize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    resetGame(overrides?: Overrides): Promise<PopulatedTransaction>;

    "resetGame()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    revealMove(
      _move: BigNumberish,
      salt: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revealMove(uint8,string)"(
      _move: BigNumberish,
      salt: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitMove(
      _moveHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitMove(bytes32)"(
      _moveHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawFund(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawFund()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
